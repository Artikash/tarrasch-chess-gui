#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

bool test12( const uint8_t *ptr, uint8_t a,  uint8_t b,  uint8_t c );
bool test16( const uint8_t *ptr, uint8_t a,  uint8_t b,  uint8_t c );
bool inner_test(
        uint8_t x,
        uint8_t y,
        uint8_t z,
        uint8_t a,
        uint8_t b,
        uint8_t c );
int scan( const char *file );
int munge( const char *file );
int draw( const char *file );

int main( int argc, const char *argv[] )
{
    if( argc < 2 )
        printf( "Usage icon-scan icon-file\n" );
    else
        draw( argv[1] );
    return 0;
}

uint8_t *pixel_copy( uint8_t * ptr, uint8_t **raw)
{
    uint8_t *praw;
    praw = *raw;
    uint8_t b = *praw++;    
    uint8_t g = *praw++;    
    uint8_t r = *praw++;    
    *raw = praw;
    if( r==255 && g==0 && b==255 ) // magenta representing transparent ?
    {
        *ptr++ = 255;   //b
        *ptr++ = 255;   //g
        *ptr++ = 255;   //r
        *ptr++ = 1;
    }
    else
    {
        *ptr++ = b;
        *ptr++ = g;
        *ptr++ = r;
        *ptr++ = 255;
    }
    return ptr;
}

uint8_t *blank( uint8_t *ptr )
{
    *ptr++ = 255;   //b
    *ptr++ = 255;   //g
    *ptr++ = 255;   //r
    *ptr++ = 1;
    return ptr;
}

uint8_t *black( uint8_t *ptr )
{
    *ptr++ = 14;   //b
    *ptr++ = 9;   //g
    *ptr++ = 6;   //r
    *ptr++ = 255;
    return ptr;
}

uint8_t *grey( uint8_t *ptr )
{
    *ptr++ = 128;   //b
    *ptr++ = 128;   //g
    *ptr++ = 128;   //r
    *ptr++ = 255;
    return ptr;
}

uint8_t *white( uint8_t *ptr )
{
    *ptr++ = 240;   //b
    *ptr++ = 240;   //g
    *ptr++ = 240;   //r
    *ptr++ = 255;
    return ptr;
}

uint8_t *light( uint8_t *ptr )
{
    *ptr++ = 179;   //b
    *ptr++ = 226;   //g
    *ptr++ = 255;   //r
    *ptr++ = 255;
    return ptr;
}

uint8_t *dark( uint8_t *ptr )
{
    *ptr++ = 116;   //b
    *ptr++ = 162;   //g
    *ptr++ = 220;   //r
    *ptr++ = 255;
    return ptr;
}


// 0x100 pixel bitmap = 0x300 bytes = 0x100 (b,g,r) triples
uint8_t pixels_256[];

int draw( const char *file )
{
    const uint8_t *buf = 0;
    FILE *f = 0;
    f = fopen( file, "rb" );
    if( !f )
        printf( "Cannot open file %s\n", file );
    buf = (const uint8_t *)malloc(1000000);
    if( !buf )
        printf( "Cannot allocate memory\n" );
    if( f && buf )
    {
        int len = fread( (void *)buf, 1, 1000000, f );
        if( len )
        {
#if 1
            uint8_t *ptr = (uint8_t *)&buf[0x8e];
            uint8_t *raw = pixels_256;
            for( int pixel=0; pixel<256; pixel++ )
                ptr = pixel_copy(ptr,&raw);
#else
            const char *s;
            char c;
            for( int row=0; row<16; row++ )
            {
                switch(row)
                {
                    case 0:     s="lllllddddddlllll";    break;
                    case 1:     s="lllllddbbddlllll";    break;
                    case 2:     s="llblldbwgbdllbll";    break;
                    case 3:     s="llbllddbbddllbll";    break;
                    case 4:     s="lbbbldbbbbdlbbbl";    break;
                    case 5:     s="lllllddddddlllll";    break;
                    case 6:     s="     llllll     ";    break;
                    case 7:     s="     llblll     ";    break;
                    case 8:     s="     llblll     ";    break;
                    case 9:     s="     lbbbll     ";    break;
                    case 10:    s="     llllll     ";    break;
                    case 11:    s="     dddddd     ";    break;
                    case 12:    s="     dddddd     ";    break;
                    case 13:    s="     dddddd     ";    break;
                    case 14:    s="     dddddd     ";    break;
                    case 15:    s="     dddddd     ";    break;
                }
                int offset_top_left = 0x44e;
                int offset = offset_top_left - row*0x40;
                uint8_t *ptr = (uint8_t *)&buf[offset];
                for( int col=0; col<16; col++ )
                {
                    c = s[col];
                    switch(c)
                    {
                        case ' ':   ptr = blank(ptr);    break;
                        case 'l':   ptr = light(ptr);    break;
                        case 'd':   ptr = dark(ptr);     break;
                        case 'b':   ptr = black(ptr);    break;
                        case 'w':   ptr = white(ptr);    break;
                        case 'g':   ptr = grey(ptr);     break;
                    }
                }
            }
            #endif
        }
        FILE *g = fopen( "new.ico", "wb" );
        if( !g )
            printf( "Cannot open file new.ico\n" );
        else
        {
            fwrite( (void *)buf, 1, len, g );
            fclose(g);
        }
    }
    if( buf )
        free( (void *)buf );
    if( f )
        fclose(f);
    return 0;
}

int munge( const char *file )
{
    const uint8_t *buf = 0;
    FILE *f = 0;
    f = fopen( file, "rb" );
    if( !f )
        printf( "Cannot open file %s\n", file );
    buf = (const uint8_t *)malloc(1000000);
    if( !buf )
        printf( "Cannot allocate memory\n" );
    if( f && buf )
    {
        int len = fread( (void *)buf, 1, 1000000, f );
        if( len )
        {
            uint8_t *ptr;
            ptr = (uint8_t *)&buf[0x30e];
            for( int i=0; i<95; i++ )
            {
                *ptr++ = 0xff;
                *ptr++ = 0;
                *ptr++ = 0;
                ptr++;
            }
            ptr = (uint8_t *)&buf[0x2e2];
            for( int i=0; i<6; i++ )
            {
                *ptr++ = 0xff;
                *ptr++ = 0;
                *ptr++ = 0;
                ptr++;
            }
            ptr = (uint8_t *)&buf[0x0a2];
            for( int i=0; i<6; i++ )
            {
                *ptr++ = 0xff;
                *ptr++ = 0;
                *ptr++ = 0;
                ptr++;
            }
        }
        FILE *g = fopen( "blue.ico", "wb" );
        if( !g )
            printf( "Cannot open file blue.ico\n" );
        else
        {
            fwrite( (void *)buf, 1, len, g );
            fclose(g);
        }
    }
    if( buf )
        free( (void *)buf );
    if( f )
        fclose(f);
    return 0;
}

int scan( const char *file )
{
    const int MAX_SIZE = 10000000;
    const uint8_t *buf = 0;
    FILE *f = 0;
    f = fopen( file, "rb" );
    if( !f )
        printf( "Cannot open file %s\n", file );
    buf = (const uint8_t *)malloc(MAX_SIZE);
    if( !buf )
        printf( "Cannot allocate memory\n" );
    if( f && buf )
    {
        bool hit;
        int len = fread( (void *)buf, 1, MAX_SIZE, f );
     /* for( int i=0; i<len-16; i++ )
        {
            hit = test16( &buf[i], 145,134,113);
            if( hit )
                printf( "hit 16 A, offset=%x\n", i );
            hit = test16( &buf[i], 246,220,177);
            if( hit )
                printf( "hit 16 B, offset=%x\n", i );
            hit = test16( &buf[i], 230,182,135);
            if( hit )
                printf( "hit 16 C, offset=%x\n", i );
            hit = test16( &buf[i], 141,105,76);
            if( hit )
                printf( "hit 16 D, offset=%x\n", i );
        }  */ 
        for( int i=0; i<len-12; i++ )
        {
            hit = test12( &buf[i], 145,134,113);
            if( hit )
                printf( "hit 12 A, offset=%x\n", i );
            hit = test12( &buf[i], 246,220,177);
            if( hit )
                printf( "hit 12 B, offset=%x\n", i );
            hit = test12( &buf[i], 230,182,135);
            if( hit )
                printf( "hit 12 C, offset=%x\n", i );
            hit = test12( &buf[i], 141,105,76);
            if( hit )
                printf( "hit 12 D, offset=%x\n", i );
        }
    }
    if( buf )
        free( (void *)buf );
    if( f )
        fclose(f);
    return 0;
}

bool test12( const uint8_t *ptr, uint8_t a,  uint8_t b,  uint8_t c )
{
    bool hit;
    uint8_t x, y, z;
    x=ptr[0], y=ptr[1], z=ptr[2];
    hit = inner_test(x,y,z,a,b,c);
    return hit;
}

bool test16( const uint8_t *ptr, uint8_t a,  uint8_t b,  uint8_t c )
{
    bool hit;
    uint8_t x, y, z;
    x=ptr[0], y=ptr[1], z=ptr[2];
    hit = inner_test(x,y,z,a,b,c);
    if( hit )
        return true;
    x=ptr[1], y=ptr[2], z=ptr[3];
    hit = inner_test(x,y,z,a,b,c);
    return hit;
}

bool inner_test(
        uint8_t x,
        uint8_t y,
        uint8_t z,
        uint8_t a,
        uint8_t b,
        uint8_t c )
{
    if( x==a && y==b && z==c ) 
        return true;
    if( x==a && y==c && z==b ) 
        return true;
    if( x==b && y==a && z==c ) 
        return true;
    if( x==c && y==a && z==b ) 
        return true;
    if( x==b && y==c && z==a ) 
        return true;
    if( x==c && y==b && z==a ) 
        return true;
    return false;
}


// These are 0x300 (=768) bytes copied from the end of Tarrasch4Squares16x16.bmp
// (excludes an introductory 0x36 (=54) byte header - total file size is 54+768 = 822)
// Format is 0x100 (b,g,r) triples, bottom left corner through to top right corner,
// total of 256 pixels. Use red=255, g=0, blue=255 (magenta) to represent transparent
// This is a Microsoft convention for icons represented in 24 bit pixels apparently.
uint8_t pixels_256[] =
{
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0xB3, 0xE2, 0xFF, 0x9E, 0xC7, 0xE0, 0x86, 0xA9, 0xBF, 0x86, 0xA9, 0xBF, 0x86, 0xA9,
    0xBF, 0x86, 0xA9, 0xBF, 0x9F, 0xC8, 0xE1, 0xB3, 0xE2, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0xB3, 0xE2, 0xFF, 0x8D, 0xB1, 0xC6, 0x1A, 0x1F, 0x22, 0x01, 0x01, 0x01, 0x03, 0x04,
    0x04, 0x22, 0x29, 0x2D, 0x92, 0xB6, 0xCD, 0xB3, 0xE2, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xAC, 0xD7, 0xF2, 0x08, 0x0A, 0x0B, 0x0B, 0x0C,
    0x0D, 0xAE, 0xD9, 0xF5, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xB0, 0xDD, 0xF9, 0x0E, 0x11, 0x12, 0x12, 0x15,
    0x17, 0xB1, 0xDF, 0xFB, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0xB3, 0xE2, 0xFF, 0xAC, 0xD8, 0xF3, 0x7A, 0x98, 0xAA, 0x2A, 0x32, 0x38, 0x2E, 0x37,
    0x3C, 0x7A, 0x98, 0xAA, 0xAC, 0xD8, 0xF3, 0xB3, 0xE2, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0xB3, 0xE2, 0xFF, 0xB1, 0xDE, 0xFA, 0x3B, 0x48, 0x4F, 0x00, 0x00, 0x00, 0x03, 0x03,
    0x03, 0x3B, 0x47, 0x4F, 0xB0, 0xDD, 0xF9, 0xB3, 0xE2, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0x35, 0x40, 0x46, 0x3A, 0x47,
    0x4F, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xA1, 0xCA, 0xE4, 0xA3, 0xCC,
    0xE6, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x86, 0xA9, 0xBF, 0x86, 0xA9, 0xBF, 0x9C, 0xC5, 0xDD, 0xB3,
    0xE2, 0xFF, 0x49, 0x60, 0x7E, 0x3E, 0x52, 0x6C, 0x40, 0x54, 0x6D, 0x60, 0x81, 0xAA, 0x66, 0x88,
    0xB4, 0x40, 0x54, 0x6D, 0x3F, 0x53, 0x6C, 0x40, 0x56, 0x73, 0xB3, 0xE2, 0xFF, 0x9E, 0xC7, 0xE0,
    0x86, 0xA9, 0xBF, 0x86, 0xA9, 0xBF, 0x02, 0x02, 0x02, 0x20, 0x26, 0x29, 0x8B, 0xAD, 0xC2, 0xB3,
    0xE2, 0xFF, 0x61, 0x84, 0xB0, 0x3C, 0x53, 0x70, 0x33, 0x3E, 0x4B, 0x53, 0x53, 0x53, 0x50, 0x50,
    0x50, 0x39, 0x41, 0x4B, 0x3B, 0x52, 0x6F, 0x5D, 0x7E, 0xA7, 0xB3, 0xE2, 0xFF, 0x8D, 0xB1, 0xC6,
    0x1A, 0x1F, 0x22, 0x01, 0x01, 0x01, 0x06, 0x07, 0x07, 0xA7, 0xD1, 0xEB, 0xB3, 0xE2, 0xFF, 0xB3,
    0xE2, 0xFF, 0x74, 0xA2, 0xDC, 0x74, 0xA2, 0xDC, 0x53, 0x64, 0x79, 0x38, 0x38, 0x38, 0x3D, 0x3D,
    0x3D, 0x53, 0x60, 0x6F, 0x74, 0xA2, 0xDC, 0x74, 0xA2, 0xDC, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF,
    0xAC, 0xD7, 0xF2, 0x08, 0x0A, 0x0B, 0x0B, 0x0C, 0x0D, 0xAD, 0xD9, 0xF5, 0xB3, 0xE2, 0xFF, 0xB3,
    0xE2, 0xFF, 0x74, 0xA2, 0xDC, 0x74, 0xA0, 0xD8, 0x0F, 0x10, 0x12, 0x4C, 0x4C, 0x4C, 0x51, 0x51,
    0x51, 0x49, 0x4A, 0x4C, 0x75, 0xA2, 0xDB, 0x74, 0xA2, 0xDC, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF,
    0xB0, 0xDD, 0xF9, 0x0E, 0x11, 0x12, 0x26, 0x2D, 0x32, 0x7A, 0x98, 0xAA, 0xA9, 0xD4, 0xEE, 0xB3,
    0xE2, 0xFF, 0x74, 0xA2, 0xDC, 0x72, 0x9D, 0xD2, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x1A, 0x1A,
    0x1A, 0x6E, 0x6E, 0x6E, 0x71, 0x9D, 0xD3, 0x74, 0xA2, 0xDC, 0xB3, 0xE2, 0xFF, 0xAC, 0xD8, 0xF3,
    0x7A, 0x98, 0xAA, 0x2A, 0x32, 0x38, 0x02, 0x02, 0x02, 0x35, 0x3F, 0x46, 0xAC, 0xD9, 0xF4, 0xB3,
    0xE2, 0xFF, 0x74, 0xA2, 0xDC, 0x74, 0xA2, 0xDC, 0x2C, 0x39, 0x4A, 0x00, 0x00, 0x00, 0x86, 0x86,
    0x86, 0x33, 0x3A, 0x43, 0x74, 0xA2, 0xDC, 0x74, 0xA2, 0xDC, 0xB3, 0xE2, 0xFF, 0xB1, 0xDE, 0xFA,
    0x3B, 0x48, 0x4F, 0x00, 0x00, 0x00, 0x2F, 0x39, 0x3F, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3,
    0xE2, 0xFF, 0x74, 0xA2, 0xDC, 0x74, 0xA2, 0xDC, 0x6E, 0x96, 0xC9, 0x18, 0x1C, 0x21, 0x2D, 0x34,
    0x3D, 0x5B, 0x7A, 0xA0, 0x74, 0xA2, 0xDC, 0x74, 0xA2, 0xDC, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF,
    0xB3, 0xE2, 0xFF, 0x35, 0x40, 0x46, 0xA0, 0xC8, 0xE2, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF, 0xB3,
    0xE2, 0xFF, 0x74, 0xA2, 0xDC, 0x74, 0xA2, 0xDC, 0x75, 0xA2, 0xDC, 0x48, 0x60, 0x7E, 0x4F, 0x6C,
    0x90, 0x6D, 0x96, 0xC9, 0x74, 0xA2, 0xDC, 0x74, 0xA2, 0xDC, 0xB3, 0xE2, 0xFF, 0xB3, 0xE2, 0xFF,
    0xB3, 0xE2, 0xFF, 0xA1, 0xCA, 0xE4
};
